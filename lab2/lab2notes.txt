Project 1 due Wed. Sep. 14

///////////////////////////

Today:
- steps in building an executable
- arrays in C
- strings in C
- strlen, fgets
- discuss Project 1

///////////////////////////


preprocess / compile / assemble / link ("C toolchain")
(C program -> assembly file -> object file -> executable)

gcc -save-temps week2.c

a-week2.i: after pre-processor
    includes all header files, all macros have been applied,
    all comments have been removed

a-week2.s: assembly code for selected architecture

a-week2.o: object code / machine code

a.exe: also machine code, but after the linking step for all
    libraries. Multiple .o files might be linked for an executable.


/////////////////////////

Arrays in C

- CONSTANT size (not based on a user input or other variable)
- Allocated on the stack
- NO associated length field

(Later, we'll see how to create different arrays that are dynamically
allocated on the heap)

////////////////////////

Declaration:

type name[size];    //size must be constant!
                    //filled with whatever is already at that spot in memory
                    //"name" is a constant memory address of the 1st element



type name[] = {1,2,3,4};    //or, fill with values when creating array
                            //this array will be size 4




Can't make an array reference something else after it is created

int nums[5];
int vals[10];
nums = vals;        //NO! These arrays are CONSTANT memory addresses.

////////////////////////

Using:

name[index]         //get or set a value   
                    //indices are 0-based, like Java/C#



Careful! What if you access past the end?

///////////////////////

Passing array to a function:

returnType functionName(type name[], ...) {

}

What do we probably want to pass also? 

///////////////////////

Returning an array from a function:

int[] get_array() {
    int nums[5];
    return nums;
}

//(need to return int*, not int[])
//...but should NOT do
//nums is allocated on the stack, and its memory ends when the function ends

///////////////////////

Multi-dimensional arrays:

type name[rows][cols];

rows/cols are constants


//////////////////////

Strings:

- There is no "string" type in C
- text is represented with a character array / character pointer
    - an array of characters terminated with a '\0'
    - '\0' is a special end-of-string empty character
- There are functions for working with strings in string.h


/////////////////////

Declaring strings:

char temp[] = "Hello";

--> what does temp look like?





char str[] = {'h', 'i', '\0'};


//can we do?
temp = str;     


//can we do?
temp[0] = 'C';  


////////////////////////

Example: write a function to count how many times a letter appears
in a word


////////////////////////

#include <string.h>

strlen - takes string as a parameter, returns its length;

char test[] = "apple";
int len = strlen(test);     //len will be 5


////////////////////////

printing strings - use %s control string

char test[] = "apple";
printf("The word is: %s\n", test);

////////////////////////

string input

char buff[10];
printf("Enter a word: ");
scanf("%s", buff);          //why no &?


--> what is dangerous about this approach?

Enter a word: apple


///////////////////////

fgets

char buff[10];
printf("Enter a word: ");
fgets(buff, 10, stdin);


Stops reading when one of:
- has reached a newline (it WILL store the newline)
- has reached end of input
- has read size-1 characters (last is needed for '\0')

- remaining input will be read with next input command


//////////////////////////////

Getting rid of end newline:

char name[10];
printf("Enter your name: ");
fgets(name, 10, stdin);


//strcspn returns #characters in 1st param before reaching any in 2nd param
name[strcspn(name, "\n")] = '\0';


/////////////////////////////

Unexpected behavior with unsigned ints

strlen returns an UNSIGNED INT

unless otherwise stored as/cast to an int, C will try to do operations
    as unsigned if another unsigned value is involved

char test[] = {'\0'}';   //test is an empty string
if (strlen(test) - 10 >= 0) {
    printf("yes\n");
}


What happens here?


/////////////////////////////

Project 1 - brief discussion

/////////////////////////////

Lab 2

write a substring function
parameters: starting index, length, original string, place to put substring

example: 3 (start), 5 (length), "elephant" (orig), (char buffer)

main function will loop to call substring