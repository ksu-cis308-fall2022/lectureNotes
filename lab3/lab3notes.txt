New assistant: Jack Rigdon

office hour times have been updated
(check Google calendar in syllabus)


//////////////////////////////

Project 1 due Wednesday, September 14
--> start now if you haven't already!

find/replace idea

find: the
replace: blah

blahse horses are blah fastest animals
blah first blahrapy is talking

///////////////////////////////

conversion to string (more in the textbook)

int age = 10;


char str[20];
sprintf(str, "%d", age);

--> what is in str?

//str: "10\0....."

--> can store other values in a string that way


//////////////////////////////

more string functions - #include <string.h>

- I won't mention all string functions here
- make sure you read textbook chapter on strings if you haven't already

//////////////////////////////

char[] strcat(char str1[], char str2[]);

Copies characters in str2 onto the end of str1.
Returns the newly concatenated string 
(although str1 also references the concatenated string).



For example:

char test[] = "hi"; //h, i, \0
char buff[10];

--> strcat test onto buff
	(what do both strings look like now?)

strcat(buff, test);

//buff: "hi\0...."
//test: "hi"

--> strcat test onto buff again


strcat(buff, test);

buff: "hihi\0..."
test: "hi"

--> can we strcat onto test? (NO! Not enough space)

strcat(test, buff);

////////////////////////////


string s1 = "hi";
string s2 = s1;

char s1[] = "hi";
char s2[] = s1; //NO!

char[] strcpy(char str1[], char str2[]);
This function copies the characters in str2 into str1, 
overwriting anything that was already in str1. 
It returns the newly copied string (str1 also references the copied string).



For example:

char test[] = "hi";
char dest[20];


--> make dest have the characters from test

strcpy(dest, test);

dest: hi\0....
test: unchanged

strcpy(dest, test);
dest: hi\0
test: unchanged

--> copy "again" into dest

strcpy(dest, "again");

dest: again\0....

strcpy(dest, "b");

dest: b\0ain\0

/////////////////////////////

char* strtok(char str[], char delim[]);

- Returns the first token found in str before the occurrence 
    of any character in delim. 
- After the first call to strtok, pass NULL as str
    to tell it to continue looking for tokens in the original string.
- If there are multiple delimeters in a row, it will skip all of them
    (like Java StringTokenizer)



For example:

char buff[200];
char *token;    //a char pointer - more later

printf("Enter names, separated by commas: ");
fgets(buff, 200, stdin);    //"Fred,James,Jane,Lynn"

buff[strcspn(buff, "\n")] = '\0';

token = strtok(buff, ",");
while (token != NULL) 
{
	printf("%s\n", token);
	token = strtok(NULL, ",");
}

//////////////////////////////

File I/O

#include <stdio.h>



1) Connect to the file

FILE *conn_name = fopen(filename, mode);

- filename is a string (looks in same dir as .c file without abs. path)
- mode is "r" or "w" (plus other options - see text)
- returns NULL if file can't be opened



////////////////////////////////////


2) Read from the file

fgets(buff, size, conn_name)

--> just like fgets from stdin (reads one line at a time)
--> returns NULL if reaches end of input
--> stores the \n

char buff[30];
while (fgets(buff, size, conn_name) != NULL) {
	//do something with the current line (buff)
}


-OR-

fscanf(conn_name, "what to read", variable addresses);

--> just like scanf, with control strings
--> returns the number of variables correctly read (0 if none)
--> returns EOF if at end of file

/////////////////////////////////


3) Write to the file (just like printf)

fprintf(FILE* fp, char str[], variables to print...)


////////////////////////////////////

4) Close the file

fclose(conn_name);



///////////////////////////////////

Lab 3 - convert a file of dates to a different format

12/31/1999 to December 31, 1999

Uses command line arguments

int main(int argc, char* argv[])


./a.exe dates.txt out.txt

argv[0] will be "./a.exe"
argv[1] will be input file 